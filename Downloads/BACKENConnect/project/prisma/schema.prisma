generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                String    @id @default(uuid())
  email             String    @unique
  name              String?
  role              UserRole  @default(USER)
  isActive          Boolean   @default(true) @map("is_active")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  lastLogin         DateTime? @map("last_login")
  passwordHash      String    @map("password_hash")

  highlights        Highlight[]
  notes            Note[]
  readingPlans     ReadingPlan[]
  favorites        Favorite[]
  testimonies      Testimony[]
  comments         Comment[]
  reactions        Reaction[]
  notifications    Notification[]
  libraryFavorites LibraryFavorite[]

  @@map("users")
}

enum UserRole {
  USER
  ADMIN
}

model Highlight {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  verseId   String   @map("verse_id")
  color     String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user      User     @relation(fields: [userId], references: [id])

  @@map("highlights")
}

model Note {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  verseId   String   @map("verse_id")
  content   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user      User     @relation(fields: [userId], references: [id])

  @@map("notes")
}

model ReadingPlan {
  id          String   @id @default(uuid())
  userId      String   @map("user_id")
  title       String
  description String?
  startDate   DateTime @map("start_date")
  endDate     DateTime @map("end_date")
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  user        User     @relation(fields: [userId], references: [id])
  progress    ReadingProgress[]

  @@map("reading_plans")
}

model ReadingProgress {
  id            String    @id @default(uuid())
  readingPlanId String    @map("reading_plan_id")
  userId        String    @map("user_id")
  verseId       String    @map("verse_id")
  completedAt   DateTime? @map("completed_at")
  createdAt     DateTime  @default(now()) @map("created_at")

  readingPlan   ReadingPlan @relation(fields: [readingPlanId], references: [id])

  @@unique([readingPlanId, verseId])
  @@map("reading_progress")
}

model Favorite {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  verseId   String   @map("verse_id")
  createdAt DateTime @default(now()) @map("created_at")

  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, verseId])
  @@map("favorites")
}

model Testimony {
  id          String   @id @default(uuid())
  userId      String   @map("user_id")
  title       String
  content     String
  isPublished Boolean  @default(true) @map("is_published")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  user        User      @relation(fields: [userId], references: [id])
  comments    Comment[]
  reactions   Reaction[]

  @@map("testimonies")
}

model Comment {
  id          String   @id @default(uuid())
  testimonyId String   @map("testimony_id")
  userId      String   @map("user_id")
  content     String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  testimony   Testimony @relation(fields: [testimonyId], references: [id])
  user        User      @relation(fields: [userId], references: [id])

  @@map("comments")
}

model Reaction {
  id          String       @id @default(uuid())
  testimonyId String       @map("testimony_id")
  userId      String       @map("user_id")
  type        ReactionType
  createdAt   DateTime     @default(now()) @map("created_at")

  testimony   Testimony    @relation(fields: [testimonyId], references: [id])
  user        User         @relation(fields: [userId], references: [id])

  @@unique([testimonyId, userId])
  @@map("reactions")
}

enum ReactionType {
  LIKE
  HEART
}

model LibraryBook {
  id          String   @id @default(uuid())
  title       String
  author      String?
  description String?
  fileUrl     String   @map("file_url")
  coverUrl    String?  @map("cover_url")
  category    String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  favorites   LibraryFavorite[]

  @@map("library_books")
}

model LibraryFavorite {
  id        String   @id @default(uuid())
  bookId    String   @map("book_id")
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")

  book      LibraryBook @relation(fields: [bookId], references: [id])
  user      User        @relation(fields: [userId], references: [id])

  @@unique([bookId, userId])
  @@map("library_favorites")
}

model Notification {
  id        String           @id @default(uuid())
  userId    String           @map("user_id")
  type      NotificationType
  title     String
  content   String
  isRead    Boolean          @default(false) @map("is_read")
  createdAt DateTime         @default(now()) @map("created_at")

  user      User             @relation(fields: [userId], references: [id])

  @@map("notifications")
}

enum NotificationType {
  NEW_TESTIMONY
  NEW_COMMENT
  NEW_REACTION
  READING_REMINDER
  SYSTEM
}